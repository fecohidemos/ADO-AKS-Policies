# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - policies/*

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '30dd7e92-a4ad-446e-a91c-9515c64125cb'
  imageRepository: 'nodejsapp'
  containerRegistry: 'adoakscr.azurecr.io'
  dockerfilePath: 'node/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'adoakscr1902589d-auth'
  waitForScanResultsAfterPushInMinutes: '5'
  azureSubName: 'ado-aks-policy-poc'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        addPipelineData: false
        tags: |
          $(tag)

    - task: MicrosoftSecurityDevOps@1
      displayName: Microsoft Security DevOps
      inputs:
        break: true
        tools: trivy
        policy: microsoft
        publish: true
        # command: 'run' | 'pre-job' | 'post-job'. Optional. The command to run. Default: run
        # config: string. Optional. A file path to an MSDO configuration file ('*.gdnconfig').
        # policy: 'azuredevops' | 'microsoft' | 'none'. Optional. The name of a well-known Microsoft policy. If no configuration file or list of tools is provided, the policy may instruct MSDO which tools to run. Default: azuredevops.
        # categories: string. Optional. A comma-separated list of analyzer categories to run. Values: 'code', 'artifacts', 'IaC', 'containers'. Example: 'IaC, containers'. Defaults to all.
        # languages: string. Optional. A comma-separated list of languages to analyze. Example: 'javascript,typescript'. Defaults to all.
        # tools: string. Optional. A comma-separated list of analyzer tools to run. Values: 'bandit', 'binskim', 'eslint', 'templateanalyzer', 'terrascan', 'trivy'.
        # break: boolean. Optional. If true, will fail this build step if any error level results are found. Default: false.
        # publish: boolean. Optional. If true, will publish the output SARIF results file to the chosen pipeline artifact. Default: true.
        # artifactName: string. Optional. The name of the pipeline artifact to publish the SARIF result file to. Default: CodeAnalysisLogs*.

    - upload: manifests
      artifact: manifests

    # Wait till ASC vulnerability scan will be completed for pushed image
  - job: WaitForScanResults
    displayName: Wait for Scan result
    pool: Server
    dependsOn: 
    - Build
    condition: succeeded()
    steps:
    - task: Delay@1
      inputs:
        delayForMinutes: $(waitForScanResultsAfterPushInMinutes)
    
    # Run Image scan gate - which extracts image scan results and assess whether 
    # to fail the pipeline based on severity threshold configuration.
    # Using the ImageScanSummaryAssessmentGate.ps1 script in same repo folder
  - job: ImageScanGate
    displayName: Image Scan security gate
    pool:
      vmImage: $(vmImageName)
    dependsOn: 
    - Build
    - WaitForScanResults
    steps:
    # Read more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-cli?view=azure-devops)
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureSubName)'
        scriptType: 'pscore'
        scriptLocation: 'scriptPath'
        # Security Gate powershell script in same folder
        scriptPath: '$(Build.SourcesDirectory)/ImageScanSummaryAssessmentGate.ps1'
        arguments: '-registryName $(containerRegistry) -repository $(imageRepository) -tag $(tag)'